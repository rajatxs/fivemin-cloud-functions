<style>
.post__content {
   width: clamp(150px, 85vw, 700px);
   margin-left: auto;
   margin-right: auto;
}
.post__meta {
   position: relative;
}
.post__show-more-opt-button {
   position: absolute;
   right: 8px;
   min-width: 8px;
   height: 24px;
}
.post__tag-group {
   display: flex;
   gap: var(--gap-half);
   justify-content: center;
   align-items: stretch;
   flex-wrap: wrap;
}
.post__cover-image {
   border-radius: 12px;
   height: clamp(200px, 50vw, 400px);
   background-position: center;
   background-size: cover;
   background-repeat: no-repeat;
   background-image: url('<%= postCoverImageUrl %>');
}
.post__cover-image, .fm-post__paragraph, .content__image_block {
   position: relative;
}
.fm-post__caption, .content__image_caption {
   display: block;
   text-align: center;
   font-size: 90%;
   color: var(--accents-4);
}
.post__cover-image-ref, .fm-post__image_ref, .content__image_ref {
   display: inline-flex;
   position: absolute;
   min-width: 60px;
   text-align: center;
   top: var(--gap-half);
   right: var(--gap-half);
   padding: var(--gap-quarter) var(--gap-half);
   background-color: var(--overlay-dark);
   color: var(--light);
   border-radius: 25px;
   opacity: 0.7;
   transition: opacity 120ms ease, background-color 40ms linear;
}
.post__cover-image-ref small, .fm-post__image_ref small, .content__image_ref small {
   margin-left: auto;
   margin-right: auto;
}
.post__cover-image-ref:hover, .fm-post__image_ref:hover, .content__image_ref:hover {
   background-color: var(--light-fr);
   opacity: 1;
}
.post__cover-image-ref:focus, .fm-post__image_ref:focus, .content__image_ref:focus {
   background-color: var(--light-fr);
}

.post__body h1,
.post__body h2,
.post__body h3,
.post__body h4,
.post__body h5,
.post__body h6 {
   padding: 8px 0;
}
.post__body pre {
   line-break: anywhere;
   white-space: break-spaces;
}
.post__body code.inline-code {
   padding: 2px 4px;
   border-radius: 4px;
}
.content__image_block {
   margin: 1rem 0;
   line-height: 1.825em;
}
.content__image_caption {
   margin-top: 4px;
}
.content__code_block {
   position: relative;
   border-radius: var(--radius);
   margin-bottom: 1rem;
   overflow-x: auto;
}
.content__code_block pre.content__code {
   margin: 0;
   padding-top: var(--gap);
   padding-bottom: var(--gap);
   padding-left: var(--gap);
   padding-right: 52pt;
   font-family: var(--font-mono);
   white-space: pre;
   overflow-x: auto;
}
.content__code_block, code.inline-code {
   border: 1px solid var(--accents-2);
   background-color: var(--accents-1);
}
.content__code_block .content__btn_copy_code {
   position: absolute;
   top: 12pt;
   right: 12pt;
   width: auto;
   min-width: auto;
   height: 2rem;
   min-height: auto;
   padding: auto;
   pointer-events: all;
}
.content__code_block .content__btn_copy_code .app-icon.clipboard-icon {
   display: inline-block;
}
.content__code_block .content__btn_copy_code .app-icon.check-icon {
   display: none;
}
.content__code_block .content__btn_copy_code.copied {
   pointer-events: none;
}
.content__code_block .content__btn_copy_code.copied .app-icon.clipboard-icon {
   display: none;
}
.content__code_block .content__btn_copy_code.copied .app-icon.check-icon {
   display: inline-block;
}
.content__warn {
   padding: var(--gap);
   background-color: var(--warn);
   border-radius: var(--radius);
   color: var(--warn-fr);
}
.content__warn_message {
   margin: 0;
}

@media (max-width: 576px) {
   .post__tag-group {
      justify-content: flex-start;
   }
}
</style>

<main class="page-content-y-padding">
   <article class="post__content">
      <header>
         <h1 class="post__title"><%= postTitle %></h1>
         <p class="post__meta">
            <a 
               href="<%= postTopicUrl %>" 
               aria-label="<%= postTopic %> Topic" 
               class="post__topic">
               <%= postTopic %>
            </a>
            <span>&bull;</span>
            <time datetime="<%= postPublishTime.format %>"><%= postPublishTime.readable %></time>

            <!-- More option button -->
            <button 
               type="button" 
               title="More options" 
               id="btnShowOptionView" 
               class="post__show-more-opt-button adaptive">
               <svg 
                  role="img" 
                  xmlns="http://www.w3.org/2000/svg" 
                  viewBox="0 0 24 24">
                  <path d="M12 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zM6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"></path>
               </svg>
            </button>
         </p>
      </header>

      <section class="post__cover-image">
         <% if (postCoverImageRefName.length && postCoverImageRefUrl.length) { %>
            <a 
               rel="nofollow"
               href="<%= postCoverImageRefUrl %>" 
               target="_blank" 
               aria-hidden="true"
               tabindex="-1"
               class="post__cover-image-ref">
               <small><%= postCoverImageRefName %></small>
            </a>
         <% } %>
      </section>

      <br />

      <section id="sectionPostBody" class="post__body">
         <%- postBody %>
      </section>
   </article>

   <br />

   <nav class="post__tag-group">
      <% for (const tag of postTags) { %>
         <a 
            href="<%= `/search?q=${encodeURI(tag)}` %>" 
            aria-label="Search <%= tag %>"
            class="post__tag app-button small adaptive">
            <small><%= tag %></small>
         </a>
      <% } %>
   </nav>

   <% if (relatedPosts.length > 0) { %>
      <br />
      <hr />
      <br />
   
      <%- include(`partials/post-collection`, { posts: relatedPosts, showTopic: true }) %>
   <% } %>
</main>

<style>
#dialogPostOptionView {
   padding: 0;
   width: 320px;
   border: none;
   border-radius: var(--radius);
   background-color: var(--background);
   color: var(--foreground);
}
#dialogPostOptionView::backdrop {
   background-color: rgba(50, 50, 50, 0.6);
}
.post-opt-view__header {
   padding: var(--gap-half) var(--gap);
   background-color: var(--accents-1);
}
.post-opt-view__menu {
   display: flex;
   flex-direction: column;
   padding: var(--gap-quarter) var(--gap-half);
   border-top: 1px solid var(--accents-2);
   border-bottom: 1px solid var(--accents-2);
}
.post-opt-view__menu-item {
   display: flex;
   gap: var(--gap-quarter);
   color: inherit;
   padding: var(--gap-half);
   border-radius: var(--radius);
   transition: background-color 120ms ease;
}
.post-opt-view__menu-item svg {
   width: 24px;
   height: 24px;
   fill: var(--foreground);
}
.post-opt-view__menu-item:hover {
   background-color: var(--accents-2);
}
.post-opt-view__footer {
   display: flex;
   justify-content: flex-end;
   padding: var(--gap-half);
}
.post-opt-view__footer .dialog-close-button {
   width: 100%;
   border-radius: var(--radius);
}
@media (prefers-color-scheme: dark) {
   #dialogPostOptionView {
      background-color: var(--accents-1);
   }
   #dialogPostOptionView::backdrop {
      background-color: rgba(0, 0, 0, 0.8);
   }
}
</style>

<dialog id="dialogPostOptionView">
   <header class="post-opt-view__header">
      <div><small><strong>Article ID</strong>:&nbsp;<span class="text-muted"><%= postId %></span></small></div>
      <div><small><strong>Last updated</strong>:&nbsp;<time datetime="<%= postLastUpdateTime.format %>" class="text-muted"><%= postLastUpdateTime.readable %></time></small></div>
      <div>
         <small>
            <strong>License</strong>:&nbsp;
            <% if (postLicense === 'CC-BY-4.0') { %>
               <a 
                  href="https://creativecommons.org/licenses/by/4.0" 
                  target="_blank" 
                  aria-hidden="true" 
                  tabindex="-1">
                  Creative Commons Attribution (CC BY) 4.0
               </a>
            <% } else if (postLicense === 'CC-BY-NC-4.0') { %>
               <a 
                  href="https://creativecommons.org/licenses/by-nc/4.0" 
                  target="_blank" 
                  aria-hidden="true" 
                  tabindex="-1">
                  Creative Commons Attribution-NonCommercial (CC BY-NC) 4.0
               </a>
            <% } else { %>
               <span class="text-muted"><%= postLicense %></span>
            <% } %>
         </small>
      </div>
   </header>
   <nav class="post-opt-view__menu">
      <a href="mailto:<%= contactEmail %>?subject=Feedback%20for%20Article%20ID%20<%= postId %>" class="post-opt-view__menu-item">
         <svg role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
            <path d="M16 2H8C4.691 2 2 4.691 2 8v12a1 1 0 0 0 1 1h13c3.309 0 6-2.691 6-6V8c0-3.309-2.691-6-6-6zm4 13c0 2.206-1.794 4-4 4H4V8c0-2.206 1.794-4 4-4h8c2.206 0 4 1.794 4 4v7z"></path>
            <circle cx="9.5" cy="11.5" r="1.5"></circle>
            <circle cx="14.5" cy="11.5" r="1.5"></circle>
         </svg>
         <span>Feedback</span>
      </a>
      <a href="mailto:<%= contactEmail %>?subject=Report%20for%20Article%20ID%20<%= postId %>" class="post-opt-view__menu-item">
         <svg role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
            <path d="M19 4H6V2H4v18H3v2h4v-2H6v-5h13a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1zm-1 9H6V6h12v7z"></path>
         </svg>
         <span>Report</span>
      </a>
   </nav>
   <footer class="post-opt-view__footer">
      <button 
         type="button" 
         id="btnCloseOptionView" 
         class="dialog-close-button small">
         Close
      </button>
   </footer>
</dialog>

<script>
function createClipboardIcon() {
   const svgElem = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
   svgElem.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
   svgElem.setAttribute('class', 'app-icon clipboard-icon');
   svgElem.setAttribute('viewBox', '0 0 24 24');

   const pathElem = document.createElementNS('http://www.w3.org/2000/svg', 'path');
   pathElem.setAttribute('d', 'M19 3h-2.25a1 1 0 0 0-1-1h-7.5a1 1 0 0 0-1 1H5c-1.103 0-2 .897-2 2v15c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2V5c0-1.103-.897-2-2-2zm0 17H5V5h2v2h10V5h2v15z');
   svgElem.appendChild(pathElem);

   return svgElem;
}

function createCheckIcon() {
   const svgElem = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
   svgElem.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
   svgElem.setAttribute('class', 'app-icon check-icon');
   svgElem.setAttribute('viewBox', '0 0 24 24');

   const pathElem = document.createElementNS('http://www.w3.org/2000/svg', 'path');
   pathElem.setAttribute('d', 'm10 15.586-3.293-3.293-1.414 1.414L10 18.414l9.707-9.707-1.414-1.414z');
   svgElem.appendChild(pathElem);

   return svgElem;
}

;(function () {
   const postBodyRoot = document.getElementById('sectionPostBody');
   const btnShowOptionView = document.getElementById('btnShowOptionView');
   const btnCloseOptionView = document.getElementById('btnCloseOptionView');

   btnShowOptionView.addEventListener('click', function() {
      document.getElementById('dialogPostOptionView').showModal();
   });

   btnCloseOptionView.addEventListener('click', function() {
      document.getElementById('dialogPostOptionView').close();
   });

   // Assigning the target attribute to each hyperlink
   for (const href of postBodyRoot.getElementsByTagName('a')) {
      if (!href.hasAttribute('target')) {
         href.classList.add('content__href');
         href.setAttribute('target', '_blank');
      }
   }

   // Inserting a button for the clipboard write action within the code block
   for (const codeBlock of postBodyRoot.getElementsByClassName('content__code_block')) {
      const codeElem = codeBlock.querySelector('.content__code');
      if (!codeElem) {
         continue;
      }

      const copyBtn = document.createElement('button');
      copyBtn.type = 'button';
      copyBtn.title = 'Copy to Clipboard';
      copyBtn.classList.add('content__btn_copy_code');
      copyBtn.append(createClipboardIcon(), createCheckIcon());

      copyBtn.addEventListener('click', async function() {
         if (copyBtn.classList.contains('copied')) {
            return;
         }

         try {
            copyTextToClipboard(codeElem.textContent, function() {
               copyBtn.classList.add('copied');

               setTimeout(function() {
                  copyBtn.classList.remove('copied');
               }, 5000);
            });
         } catch (error) {
            console.error(error);
         }
      });
      codeBlock.appendChild(copyBtn);
   }
}());
</script>
